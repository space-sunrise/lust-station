uniform highp vec3 color1;
uniform highp vec3 color2;
uniform bool horizontal;

// DISPLACEMENT START
uniform sampler2D displacementMap;
uniform highp float displacementSize;
uniform highp vec4 displacementUV;
varying highp vec2 displacementUVOut;

void vertex() {
    if(useDisplacement == true) {
        displacementUVOut = mix(displacementUV.xy, displacementUV.zw, tCoord2);
    }
}

uniform bool useDisplacement;
// DISPLACEMENT END

highp float find_bound(bool forward, bool horizontal) {
    highp float step = horizontal ? TEXTURE_PIXEL_SIZE.x : TEXTURE_PIXEL_SIZE.y;
    highp float current = horizontal ? UV.x : UV.y;

    const highp int MAX_ITERATIONS = 256;
    highp int iterations = 0;

    highp vec4 result = texture2D(TEXTURE, UV);

    while ((forward ? current < 1.0 : current > 0.0) && result.a > 0.0 && iterations < MAX_ITERATIONS) {
        current += forward ? step : -step;
        iterations++;

        highp vec2 probeUV = UV;
        if (horizontal)
            probeUV.x = current;
        else
            probeUV.y = current;

        result = texture2D(TEXTURE, probeUV);
    }

    return current;
}


void fragment() {
    highp vec4 color = texture2D(TEXTURE, UV);

    highp float a = find_bound(false, horizontal);
    highp float b = find_bound(true, horizontal);

    highp float diff = max(0.001, b - a);
    highp float pos = horizontal ? UV.x : UV.y;

    highp float norm = clamp((pos - a) / diff, 0.0, 1.0);
    highp vec3 gradient = mix(color2, color1, norm);

    // DISPLACEMENT START
    if(useDisplacement == true) {
        highp vec4 displacementSample = texture2D(displacementMap, displacementUVOut);
        highp vec2 displacementValue = (displacementSample.xy - vec2(128.0 / 255.0)) / (1.0 - 128.0 / 255.0);
        color = zTexture(UV + displacementValue * TEXTURE_PIXEL_SIZE * displacementSize * vec2(1.0, -1.0));
        color.a *= displacementSample.a;
    }
    // DISPLACEMENT END

    COLOR = vec4(color.rgb * gradient, color.a);
}

