uniform highp vec3 color1;
uniform highp vec3 color2;
uniform highp vec2 texScale;
uniform highp vec2 offset;
uniform highp vec2 size;
uniform highp float rotation;
uniform bool pixelated;
uniform bool mirrored;

// DISPLACEMENT START
uniform sampler2D displacementMap;
uniform highp float displacementSize;
uniform highp vec4 displacementUV;
varying highp vec2 displacementUVOut;

void vertex() {
    if(useDisplacement == true) {
        displacementUVOut = mix(displacementUV.xy, displacementUV.zw, tCoord2);
    }
}

uniform bool useDisplacement;
// DISPLACEMENT END

highp float mirror(highp float x) {
    return mix(x, abs(fract(x) * 2.0 - 1.0), float(mirrored));
}

void fragment() {
    highp vec4 color = texture2D(TEXTURE, UV);

    highp vec2 uv = UV2;
    highp float rad = radians(rotation);
    highp vec2 center = vec2(0.5);
    uv -= center;

    highp float cos_a = cos(rad);
    highp float sin_a = sin(rad);
    highp mat2 rot = mat2(
        cos_a, -sin_a,
        sin_a,  cos_a
    );

    if (pixelated) {
        uv = floor(uv * texScale) / texScale;
    }

    uv = rot * uv;
    uv += center;

    highp float t = mirror(uv.y / size.y + offset.y);
    t = clamp(t, 0.0, 1.0);

    highp vec3 gradient = mix(color2, color1, t);

    // DISPLACEMENT START
    if(useDisplacement == true) {
        highp vec4 displacementSample = texture2D(displacementMap, displacementUVOut);
        highp vec2 displacementValue = (displacementSample.xy - vec2(128.0 / 255.0)) / (1.0 - 128.0 / 255.0);
        color = zTexture(UV + displacementValue * TEXTURE_PIXEL_SIZE * displacementSize * vec2(1.0, -1.0));
        color.a *= displacementSample.a;
    }
    // DISPLACEMENT END

    COLOR = color * vec4(gradient, 1);
}
