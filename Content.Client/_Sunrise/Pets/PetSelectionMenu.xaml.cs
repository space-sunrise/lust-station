// Â© SUNRISE, An EULA/CLA with a hosting restriction, full text: https://github.com/space-sunrise/space-station-14/blob/master/CLA.txt

using System.Linq;
using System.Numerics;
using Content.Client._Sunrise.PlayerCache;
using Content.Client.Stylesheets;
using Content.Shared._Sunrise.Pets;
using Content.Shared._Sunrise.SunriseCCVars;
using Content.Sunrise.Interfaces.Shared;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Sunrise.Pets;

[GenerateTypedNameReferences]
public sealed partial class PetSelectionMenu : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly PlayerCacheManager _playerCache = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;
    private ISharedSponsorsManager? _sponsorsManager; // Sunrise-Sponsors

    public event Action<string>? OnIdSelected;

    private List<string> _availablePetSelections = [];
    private Dictionary<string, PetSelectionInfo> _petSelectionInfos = new();
    private string _currentSelectedPet = string.Empty;
    private string _searchText = string.Empty;
    private string _previewedPet = string.Empty;

    private readonly SpriteSystem _sprite;

    public PetSelectionMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _playerCache.CacheChanged += UpdateSelectedPetFromCache;
        UpdateSelectedPetFromCache();

        _sprite = _entityManager.System<SpriteSystem>();

        SearchBar.OnTextChanged += OnSearchTextChanged;
        SelectButton.OnPressed += OnSelectButtonPressed;
        RemovePetButton.OnPressed += OnRemovePetButtonPressed;

        IoCManager.Instance!.TryResolveType(out _sponsorsManager); // Sunrise-Sponsors
    }

    private void UpdateSelectedPetFromCache()
    {
        var selectedPet = _playerCache.TryGetCachedPet(out var pet) ? pet : null;
        SetSelectedPet(selectedPet);
    }

    private void SetSelectedPet(string? petId)
    {
    }

    private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
    {
        _searchText = args.Text;
        UpdateButtons();
    }

    public void UpdateState(List<PetSelectionInfo> petSelections)
    {
        _availablePetSelections = petSelections.Select(p => p.Id).ToList();
        _petSelectionInfos = petSelections.ToDictionary(p => p.Id, p => p);

        var firstAvailable = petSelections.FirstOrDefault(p => p.IsAvailable)?.Id;
        var currentPet = GetCurrentPetSelection();
        if (!string.IsNullOrEmpty(currentPet) && _availablePetSelections.Contains(currentPet) && _petSelectionInfos.TryGetValue(currentPet, out var info) && info.IsAvailable)
        {
            _currentSelectedPet = currentPet;
            _previewedPet = currentPet;
            UpdatePreview(_previewedPet);
        }
        else if (!string.IsNullOrEmpty(firstAvailable))
        {
            _currentSelectedPet = string.Empty;
            _previewedPet = string.Empty;
            UpdatePreview("");
        }
        else
        {
            _currentSelectedPet = string.Empty;
            _previewedPet = string.Empty;
            UpdatePreview("");
        }

        UpdateButtons();
    }

    public void UpdateState()
    {
        var petSelectionPrototypes = _prototypeManager.EnumeratePrototypes<PetSelectionPrototype>();
        var allPetSelections = new List<PetSelectionInfo>();

        var localSession = _playerManager.LocalSession;
        List<string>? availablePets = null;
        if (localSession != null && _sponsorsManager != null)
            _sponsorsManager.TryGetPets(localSession.UserId, out availablePets);

        foreach (var petSelectionPrototype in petSelectionPrototypes)
        {
            var isAvailable = !petSelectionPrototype.SponsorOnly || availablePets != null && availablePets.Contains(petSelectionPrototype.ID);
            allPetSelections.Add(new PetSelectionInfo(petSelectionPrototype.ID, isAvailable));
        }

        UpdateState(allPetSelections);
    }

    private void UpdateButtons()
    {
        var currentlyPreviewedPet = _previewedPet;

        ClearButtons();

        foreach (var petSelectionInfo in _petSelectionInfos.Values)
        {
            var petSelection = petSelectionInfo.Id;
            if (!_prototypeManager.TryIndex(petSelection, out PetSelectionPrototype? petSelectionPrototype))
                continue;

            var petPrototype = _prototypeManager.Index<EntityPrototype>(petSelectionPrototype.PetEntity);

            var petName = petSelectionPrototype.LocalizedName;
            if (!string.IsNullOrEmpty(_searchText) &&
                !petName.ToLowerInvariant().Contains(_searchText.ToLowerInvariant()) &&
                !petSelection.ToLowerInvariant().Contains(_searchText.ToLowerInvariant()))
                continue;

            var button = new Button
            {
                MinHeight = 50,
                HorizontalExpand = true,
                ToggleMode = true,
                Pressed = petSelection == currentlyPreviewedPet,
                Disabled = !petSelectionInfo.IsAvailable
            };

            var panel = new PanelContainer
            {
                HorizontalExpand = true
            };

            var box = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                Margin = new Thickness(5)
            };

            ;
            var petIcon = new TextureRect
            {
                Texture = _sprite.Frame0(petPrototype),
                Stretch = TextureRect.StretchMode.KeepAspectCentered,
                SetSize = new Vector2(40, 40)
            };

            var nameLabel = new Label
            {
                Text = petSelectionPrototype.LocalizedName,
                StyleClasses = { StyleNano.StyleClassLabelBig },
                HorizontalExpand = true,
                VerticalAlignment = VAlignment.Center,
                Margin = new Thickness(10, 0, 0, 0)
            };

            if (!petSelectionInfo.IsAvailable)
            {
                var lockIcon = new TextureRect
                {
                    Texture = _sprite.GetTexture(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/Nano/lock.svg.192dpi.png"))),
                    Stretch = TextureRect.StretchMode.KeepAspectCentered,
                    SetSize = new Vector2(20, 20),
                    Margin = new Thickness(5, 0, 0, 0)
                };
                box.AddChild(lockIcon);
            }

            box.AddChild(petIcon);
            box.AddChild(nameLabel);
            panel.AddChild(box);
            button.AddChild(panel);

            button.OnPressed += _ =>
            {
                if (!petSelectionInfo.IsAvailable)
                    return;

                foreach (var child in ButtonContainer.Children)
                {
                    if (child is Button otherButton && otherButton != button)
                        otherButton.Pressed = false;
                }

                button.Pressed = true;
                _previewedPet = petSelection;

                UpdatePreview(petSelection);
            };

            ButtonContainer.AddChild(button);
        }
    }

    private void UpdatePreview(string petSelection)
    {
        var hasPet = !string.IsNullOrEmpty(petSelection);

        if (!hasPet)
        {
            PreviewTexture.Texture = null;
            PreviewName.Text = Loc.GetString("pet-selection-menu-no-select");
            PreviewDescription.Text = Loc.GetString("pet-selection-menu-no-select-decs");
            UpdateSelectButtonState();
            return;
        }
        if (!_prototypeManager.TryIndex(petSelection, out PetSelectionPrototype? petSelectionPrototype))
            return;

        var petPrototype = _prototypeManager.Index<EntityPrototype>(petSelectionPrototype.PetEntity);

        PreviewTexture.Texture = _sprite.Frame0(petPrototype);
        PreviewName.Text = petSelectionPrototype.LocalizedName;
        PreviewDescription.Text = petSelectionPrototype.LocalizedDescription;

        UpdateSelectButtonState();
    }

    private void UpdateSelectButtonState()
    {
        var isCurrentPet = _previewedPet == _currentSelectedPet;
        var isAvailable = _petSelectionInfos.TryGetValue(_previewedPet, out var petInfo) && petInfo.IsAvailable;
        SelectButton.Disabled = string.IsNullOrEmpty(_previewedPet) || isCurrentPet || !isAvailable;
        var anyAvailable = _petSelectionInfos.Values.Any(p => p.IsAvailable);
        RemovePetButton.Disabled = string.IsNullOrEmpty(_currentSelectedPet) || !anyAvailable;
    }

    private void ClearButtons()
    {
        ButtonContainer.RemoveAllChildren();
    }

    private void OnSelectButtonPressed(BaseButton.ButtonEventArgs args)
    {
        if (!string.IsNullOrEmpty(_previewedPet))
        {
            _currentSelectedPet = _previewedPet;
            OnIdSelected?.Invoke(_currentSelectedPet);

            SetCurrentPetSelection(_currentSelectedPet);

            UpdateButtons();

            Close();
        }
    }

    private void OnRemovePetButtonPressed(BaseButton.ButtonEventArgs args)
    {
        _currentSelectedPet = string.Empty;
        _previewedPet = string.Empty;
        OnIdSelected?.Invoke(string.Empty);

        var cache = _playerCache.GetCache();
        cache.Pet = null;
        _playerCache.SetCache(cache);

        _cfg.SetCVar(SunriseCCVars.SponsorPet, "");
        _cfg.SaveToFile();

        UpdateButtons();
        Close();
    }

    private string? GetCurrentPetSelection()
    {
        return _playerCache.TryGetCachedPet(out var pet) ? pet : null;
    }

    private void SetCurrentPetSelection(string petSelection)
    {
        var cache = _playerCache.GetCache();
        cache.Pet = petSelection;
        _playerCache.SetCache(cache);

        _cfg.SetCVar(SunriseCCVars.SponsorPet, petSelection);
        _cfg.SaveToFile();
    }
}
