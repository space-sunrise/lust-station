// Â© SUNRISE, An EULA/CLA with a hosting restriction, full text: https://github.com/space-sunrise/space-station-14/blob/master/CLA.txt

using System.Numerics;
using Content.Client._Sunrise.PlayerCache;
using Content.Shared._Sunrise.Pets;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Map;

namespace Content.Client._Sunrise.Pets;

[GenerateTypedNameReferences]
public sealed partial class LobbyPetPreviewPanel : Control
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly PlayerCacheManager _playerCache = default!;

    private EntityUid? _previewDummy;
    private string? _currentPetSelection;

    public event Action? OnChangePetRequested;

    public LobbyPetPreviewPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _playerCache.CacheChanged += UpdateSelectedPetFromCache;
        UpdateSelectedPetFromCache();

        ChangePetButton.OnPressed += _ => OnChangePetRequested?.Invoke();
    }

    private void UpdateSelectedPetFromCache()
    {
        var selectedPet = _playerCache.TryGetCachedPet(out var pet) ? pet : null;
        SetSelectedPet(selectedPet);
    }

    private void SetSelectedPet(string? petId)
    {
    }

    public void SetLoaded(bool value)
    {
    }

    public void SetSummaryText(string value)
    {
        Summary.Text = value;
    }

    public void SetPetSelection(string? petSelection)
    {
        _currentPetSelection = petSelection;
        UpdatePreview();
    }

    private void UpdatePreview()
    {
        if (_previewDummy != null)
        {
            _entManager.DeleteEntity(_previewDummy.Value);
            _previewDummy = null;
        }

        ViewBox.DisposeAllChildren();

        if (string.IsNullOrEmpty(_currentPetSelection))
        {
            SetSummaryText(Loc.GetString("pet-selection-summary-no-select"));
            return;
        }

        if (!_prototypeManager.TryIndex<PetSelectionPrototype>(_currentPetSelection, out var petSelectionPrototype))
        {
            SetSummaryText(Loc.GetString("pet-selection-summary-invalid"));
            return;
        }

        var dummy = _entManager.SpawnEntity(petSelectionPrototype.PetEntity, MapCoordinates.Nullspace);
        _previewDummy = dummy;

        var spriteView = new SpriteView
        {
            OverrideDirection = Direction.South,
            Scale = new Vector2(2f, 2f),
            MaxSize = new Vector2(80, 80),
            Stretch = SpriteView.StretchMode.Fill,
        };
        spriteView.SetEntity(dummy);
        ViewBox.AddChild(spriteView);
        SetSummaryText(Loc.GetString("pet-selection-summary-name", ("name", petSelectionPrototype.LocalizedName)));
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (_previewDummy != null)
        {
            _entManager.DeleteEntity(_previewDummy.Value);
            _previewDummy = null;
        }
    }
}
