// Â© SUNRISE, An EULA/CLA with a hosting restriction, full text: https://github.com/space-sunrise/space-station-14/blob/master/CLA.txt

using System.Linq;
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Shared._Sunrise.GhostTheme;
using Content.Shared._Sunrise.SunriseCCVars;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Content.Client._Sunrise.PlayerCache;

namespace Content.Client._Sunrise.GhostTheme;

[GenerateTypedNameReferences]
public sealed partial class GhostThemeMenu : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    [Dependency] private readonly PlayerCacheManager _playerCache = default!;

    public event Action<string>? OnIdSelected;

    private List<string> _availableGhostThemes = [];
    private Dictionary<string, GhostThemeInfo> _ghostThemeInfos = new();
    private string _currentSelectedTheme = string.Empty;
    private string _searchText = string.Empty;
    private string _previewedTheme = string.Empty;

    private readonly SpriteSystem _sprite;

    public GhostThemeMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = _entityManager.System<SpriteSystem>();

        SearchBar.OnTextChanged += OnSearchTextChanged;
        SelectButton.OnPressed += OnSelectButtonPressed;
    }

    private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
    {
        _searchText = args.Text;
        UpdateButtons();
    }

    public void UpdateState(List<GhostThemeInfo> ghostThemes)
    {
        _availableGhostThemes = ghostThemes.Select(g => g.Id).ToList();
        _ghostThemeInfos = ghostThemes.ToDictionary(g => g.Id, g => g);

        if (string.IsNullOrEmpty(_previewedTheme))
        {
            var currentTheme = GetCurrentGhostTheme();
            if (!string.IsNullOrEmpty(currentTheme) && _availableGhostThemes.Contains(currentTheme))
            {
                _currentSelectedTheme = currentTheme;
                _previewedTheme = currentTheme;
                UpdatePreview(_previewedTheme);
            }
            else if (_availableGhostThemes.Count > 0)
            {
                _currentSelectedTheme = _availableGhostThemes[0];
                _previewedTheme = _availableGhostThemes[0];
                UpdatePreview(_previewedTheme);
            }
        }
        else
        {
            UpdateSelectButtonState();
        }

        UpdateButtons();
    }

    private void UpdateButtons()
    {
        var currentlyPreviewedTheme = _previewedTheme;

        ClearButtons();

        foreach (var ghostThemeInfo in _ghostThemeInfos.Values)
        {
            var ghostTheme = ghostThemeInfo.Id;
            if (!_prototypeManager.TryIndex(ghostTheme, out GhostThemePrototype? ghostThemePrototype))
                continue;

            var themeName = Loc.GetString(ghostThemePrototype.Name);
            if (!string.IsNullOrEmpty(_searchText) &&
                !themeName.ToLowerInvariant().Contains(_searchText.ToLowerInvariant()) &&
                !ghostTheme.ToLowerInvariant().Contains(_searchText.ToLowerInvariant()))
                continue;

            var button = new Button
            {
                MinHeight = 50,
                HorizontalExpand = true,
                ToggleMode = true,
                Pressed = ghostTheme == currentlyPreviewedTheme,
                Disabled = !ghostThemeInfo.IsAvailable
            };

            var panel = new PanelContainer
            {
                HorizontalExpand = true
            };

            var box = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                Margin = new Thickness(5)
            };

            var ghostIcon = new TextureRect
            {
                Texture = ghostThemePrototype.Sprite.Frame0(),
                Stretch = TextureRect.StretchMode.KeepAspectCentered,
                SetSize = new Vector2(40, 40)
            };

            var nameLabel = new Label
            {
                Text = Loc.GetString(ghostThemePrototype.Name),
                StyleClasses = { StyleNano.StyleClassLabelBig },
                HorizontalExpand = true,
                VerticalAlignment = VAlignment.Center,
                Margin = new Thickness(10, 0, 0, 0)
            };

            if (!ghostThemeInfo.IsAvailable)
            {
                var lockIcon = new TextureRect
                {
                    Texture = _sprite.GetTexture(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/Nano/lock.svg.192dpi.png"))),
                    Stretch = TextureRect.StretchMode.KeepAspectCentered,
                    SetSize = new Vector2(20, 20),
                    Margin = new Thickness(5, 0, 0, 0)
                };
                box.AddChild(lockIcon);
            }

            box.AddChild(ghostIcon);
            box.AddChild(nameLabel);
            panel.AddChild(box);
            button.AddChild(panel);

            button.OnPressed += _ =>
            {
                if (!ghostThemeInfo.IsAvailable)
                    return;

                foreach (var child in ButtonContainer.Children)
                {
                    if (child is Button otherButton && otherButton != button)
                        otherButton.Pressed = false;
                }

                button.Pressed = true;
                _previewedTheme = ghostTheme;

                UpdatePreview(ghostTheme);
            };

            ButtonContainer.AddChild(button);
        }
    }

    private void UpdatePreview(string ghostTheme)
    {
        if (!_prototypeManager.TryIndex(ghostTheme, out GhostThemePrototype? ghostThemePrototype))
            return;

        PreviewTexture.Texture = ghostThemePrototype.Sprite.Frame0();
        PreviewTexture.ModulateSelfOverride = ghostThemePrototype.SpriteColor;
        PreviewName.Text = Loc.GetString(ghostThemePrototype.Name);

        PreviewDescription.Text = Loc.GetString("ghost-theme-preview-description");

        UpdateSelectButtonState();
    }

    private void UpdateSelectButtonState()
    {
        var isCurrentTheme = _previewedTheme == _currentSelectedTheme;
        var isAvailable = _ghostThemeInfos.TryGetValue(_previewedTheme, out var themeInfo) && themeInfo.IsAvailable;
        SelectButton.Disabled = isCurrentTheme || !isAvailable;
    }

    private void ClearButtons()
    {
        ButtonContainer.RemoveAllChildren();
    }

    private void OnSelectButtonPressed(BaseButton.ButtonEventArgs args)
    {
        if (!string.IsNullOrEmpty(_previewedTheme))
        {
            _currentSelectedTheme = _previewedTheme;
            OnIdSelected?.Invoke(_currentSelectedTheme);

            SetCurrentGhostTheme(_currentSelectedTheme);

            UpdateButtons();

            Close();
        }
    }

    private string? GetCurrentGhostTheme()
    {
        return _playerCache.TryGetCachedGhostTheme(out var theme) ? theme : null;
    }

    private void SetCurrentGhostTheme(string ghostTheme)
    {
        var cache = _playerCache.GetCache();
        cache.GhostTheme = ghostTheme;
        _playerCache.SetCache(cache);

        _cfg.SetCVar(SunriseCCVars.SponsorGhostTheme, ghostTheme);
        _cfg.SaveToFile();
    }
}
