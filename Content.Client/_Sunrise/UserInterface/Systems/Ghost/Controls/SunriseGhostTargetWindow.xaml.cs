using Content.Shared._Sunrise.Helpers;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using GhostWarpPlayer = Content.Shared.Ghost.SharedGhostSystem.GhostWarpPlayer;
using GhostWarpPlace = Content.Shared.Ghost.SharedGhostSystem.GhostWarpPlace;
using GhostWarpGlobalAntagonist = Content.Shared.Ghost.SharedGhostSystem.GhostWarpGlobalAntagonist;

namespace Content.Client._Sunrise.UserInterface.Systems.Ghost.Controls;

/// <summary>
/// Гост-менюшка с телепортом призрака к игрокам. По совместительству обзор состояния раунда с минимальным количеством мета-информации.
/// Сортирует игроков по наличию статуса антагониста, состоянию здоровья, принадлежность к отделам, работе и т.п.
/// Позволяет игроку быстро оценить статус раунда и телепортироваться к любому игроку нажав на кнопку
/// <remarks>
/// Генерация кнопок происходит автоматически. Поддерживает любые, даже неванильные роли, отделы и антагонистов
/// Для маркировки антагонистов используется <see cref="GhostPanelAntagonistMarkerComponent"/>
/// </remarks>
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class SunriseGhostTargetWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IEntityManager _entity = default!;

    private ChatIconsHelpersSystem _chatIcons = default!;

    private List<GhostWarpPlayer> _playerWarps = [];
    private List<GhostWarpPlace> _placeWarps = [];
    private List<GhostWarpGlobalAntagonist> _antagonists = [];

    private readonly List<GhostWarpPlayer> _alivePlayers = [];
    private readonly List<GhostWarpPlayer> _leftPlayers = [];
    private readonly List<GhostWarpPlayer> _deadPlayers = [];
    private readonly List<GhostWarpPlayer> _ghostPlayers = [];

    public event Action<NetEntity>? WarpClicked;

    public SunriseGhostTargetWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }

    public void Populate()
    {
        // TODO: Исправить этот щиткод через DI
        // UPDATE: Это все вызывается в виджетах, которые появляются куда раньше, чем системы
        // Реализация DI через UISystemDependency приводит к нихуя результату. Невероятные UI и их невероятные методы работы

        _chatIcons = _entity.System<ChatIconsHelpersSystem>();

        GhostTeleportContainer.DisposeAllChildren();
        _playerWarps = GetSortedByName(_playerWarps);
        _placeWarps = GetSortedByName(_placeWarps);
        _antagonists = GetSortedByName(_antagonists);

        PlayersAllocation();
        AddButtons();

        SearchBar.OnTextChanged += OnSearchTextChanged;
    }

    /// <summary>
    /// Актуализирует информацию о варпах
    /// </summary>
    public void UpdateWarps(List<GhostWarpPlayer> players, List<GhostWarpPlace> places, List<GhostWarpGlobalAntagonist> antagonists)
    {
        _playerWarps = players;
        _placeWarps = places;
        _antagonists = antagonists;
    }

    /// <summary>
    /// Генерирует и добавляет в панель кнопки для телепорта к игрокам, сортированные по отделам, состоянию и т.п.
    /// </summary>
    private void AddButtons()
    {
        AddAntagButtons(_antagonists, "ghost-teleport-menu-antagonists-label");

        // Живые
        AddPlayerButtons(_alivePlayers, "ghost-teleport-menu-alive-label");

        // Мертвые
        AddPlayerButtons(_deadPlayers, "ghost-teleport-menu-dead-label");

        // Призраки
        AddPlayerButtons(_ghostPlayers, "ghost-teleport-menu-ghosts-label");

        // Остальные
        AddPlayerButtons(_leftPlayers, "ghost-teleport-menu-left-label");
        AddPlaceButtons(_placeWarps, "ghost-teleport-menu-locations-label");
    }

    /// <summary>
    /// Сортирует игроков по их состоянию здоровья и наличия в игре
    /// </summary>
    private void PlayersAllocation()
    {
        _alivePlayers.Clear();
        _deadPlayers.Clear();
        _leftPlayers.Clear();
        _ghostPlayers.Clear();

        foreach (var warp in _playerWarps)
        {
            if (warp.IsDead) // Мертвые
                _deadPlayers.Add(warp);
            else if (warp.IsLeft) // Ливнувшие
                _leftPlayers.Add(warp);
            else if (!warp.IsDead) // Живые. Как в крите, так и полноценное живые
                _alivePlayers.Add(warp);
            else if (warp.IsGhost) // Призраки
                _ghostPlayers.Add(warp);
        }
    }
}
