using System.Linq;
using Content.Client.Lobby;
using Content.Client.Roles;
using Content.Shared._Sunrise.Helpers;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Sunrise.StationRecords;

[GenerateTypedNameReferences]
public sealed partial class SunriseGeneralRecord : BoxContainer
{
    private readonly IEntityManager _entity;
    private readonly IPrototypeManager _prototype;
    private readonly ILocalizationManager _loc;
    private readonly JobSystem _job;
    private readonly LobbyUIController _controller;

    public Action<GeneralStationRecord, uint>? OnSaveButtonPressed;
    public Action<uint>? OnPrintPressed;
    public Action<uint>? OnDeletePressed;

    private EntityUid _previewDummy;
    private readonly HumanoidCharacterProfile? _profile;

    private readonly List<SpeciesPrototype> _allSpecies;
    private readonly List<JobPrototype> _allJobs;
    private readonly Gender[] _allGender;

    private readonly bool _hasAccess;

    // Копия этого хранится в серверной системе
    private const int MaxAgeLength = 6;

    public SunriseGeneralRecord(GeneralStationRecord record,
        bool canDelete,
        bool canRedactSensitiveData,
        bool hasAccess,
        uint? id,
        in IEntityManager entity,
        in IPrototypeManager prototype,
        in ILocalizationManager loc,
        in JobSystem job,
        in LobbyUIController controller)
    {
        RobustXamlLoader.Load(this);

        _entity = entity;
        _prototype = prototype;
        _loc = loc;
        _job = job;
        _controller = controller;

        _profile = record.HumanoidProfile;
        _allSpecies = _prototype.EnumeratePrototypes<SpeciesPrototype>().ToList();
        _allJobs = _prototype.EnumeratePrototypes<JobPrototype>().ToList();
        _allGender = Enum.GetValues<Gender>();

        // Сортировка рас и работ по имени
        _allSpecies.Sort((a, b)
            => string.Compare(_loc.GetString(a.Name), _loc.GetString(b.Name), StringComparison.Ordinal));

        _allJobs.Sort((a, b)
            => string.Compare(a.LocalizedName, b.LocalizedName, StringComparison.Ordinal));

        Fingerprint.Editable = canRedactSensitiveData && hasAccess;
        Dna.Editable = canRedactSensitiveData && hasAccess;

        if (canDelete && id != null )
        {
            DeleteButton.Visible = true;
            DeleteButton.OnPressed += _ => OnDeletePressed?.Invoke(id.Value);
        }

        if (id != null )
        {
            SaveButton.Visible = true;
            SaveButton.OnPressed += _ =>
            {
                var updatedRecord = BuildUpdatedRecord(record);
                OnSaveButtonPressed?.Invoke(updatedRecord, id.Value);
            };
        }

        if (id != null )
        {
            PrintButton.Visible = true;
            PrintButton.OnPressed += _ => OnPrintPressed?.Invoke(id.Value);
        }

        _hasAccess = hasAccess;

        UpdateEditableInfo(record);
        UpdateHeading(record);
        ReloadPreview(record.JobPrototype);

        MakeDropDownSelectable();
        CheckAccess();
        CheckChanges();
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();

        _entity.DeleteEntity(_previewDummy);
    }

    /// <summary>
    /// Обновляет информацию, которая может быть изменена игроком.
    /// </summary>
    private void UpdateEditableInfo(GeneralStationRecord record)
    {
        Name.Text = record.Name;
        Age.Text = record.Age.ToString();

        for (var i = 0; i < _allGender.Length; i++)
        {
            var item = _allGender[i];
            var name = _loc.GetString("station-records-gender", ("gender", item.ToString()));

            Gender.AddItem(name, i);

            if (item == record.Gender)
                Gender.SelectId(i);
        }

        for (var i = 0; i < _allSpecies.Count; i++)
        {
            var item = _allSpecies[i];

            if (item.StationRecordsHidden && item.ID != record.Species)
                continue;

            var name = _loc.GetString(item.Name);
            Species.AddItem(name, i);

            if (item.ID == record.Species)
                Species.SelectId(i);
        }

        for (var i = 0; i < _allJobs.Count; i++)
        {
            var item = _allJobs[i];

            if (item.OverrideConsoleVisibility == false && item.ID != record.JobPrototype)
                continue;

            var name = item.LocalizedName;
            Job.AddItem(name, i);

            if (item.ID == record.JobPrototype)
                Job.SelectId(i);
        }

        Fingerprint.Text = record.Fingerprint ?? _loc.GetString("generic-not-available-shorthand");
        Dna.Text = record.DNA ?? _loc.GetString("generic-not-available-shorthand");

        Personality.Placeholder = new Rope.Leaf(_loc.GetString("station-records-ui-personality-placeholder"));

        if (!string.IsNullOrEmpty(record.Personality))
            Personality.TextRope = new Rope.Leaf(record.Personality);
    }

    /// <summary>
    /// Обновляет заголовок сверху персонажа.
    /// </summary>
    private void UpdateHeading(GeneralStationRecord record)
    {
        SubText.Visible = false;
        NameHeading.Text = record.Name;

        if (!_prototype.TryIndex<JobPrototype>(record.JobPrototype, out var job))
            return;

        SubText.Text = $"{job.LocalizedName}";
        SubText.Visible = true;

        if (!_job.TryGetDepartment(job.ID, out var department))
            return;

        SubText.Text = $"{_loc.GetString(department.Name)}, {job.LocalizedName}";
    }

    /// <summary>
    /// Обновляет превью игрока.
    /// </summary>
    private void ReloadPreview(ProtoId<JobPrototype> jobProtoId)
    {
        if (!_prototype.TryIndex(jobProtoId, out var job))
            return;

        _entity.DeleteEntity(_previewDummy);
        _previewDummy = EntityUid.Invalid;

        if (job.JobEntity != null)
            _previewDummy = _entity.Spawn(job.JobEntity, MapCoordinates.Nullspace);

        if (_profile != null && _prototype.HasIndex(_profile.Species))
            _previewDummy = _controller.LoadProfileEntity(_profile, job, true);

        SpriteView.SetEntity(_previewDummy);
    }

    /// <summary>
    /// Создает новую структуру, помещающую в себя из полей в интерфейсе для отправки на сервере для сохранения.
    /// Перед этим проводит валидацию строк и проверяет, что данные не обосраны.
    /// </summary>
    private GeneralStationRecord BuildUpdatedRecord(GeneralStationRecord original)
    {
        var textAge = Age.Text.SanitizeInput(MaxAgeLength);

        var updated = original with
        {
            Name = Name.Text,
            Age = int.TryParse(textAge, out var ageVal) ? ageVal : original.Age,
            Gender = _allGender[Gender.SelectedId],
            Species = _allSpecies[Species.SelectedId].ID,
            JobPrototype = _allJobs[Job.SelectedId].ID,
            Fingerprint = Fingerprint.Text,
            DNA = Dna.Text,
            Personality = Rope.Collapse(Personality.TextRope),
        };

        return GeneralStationRecord.SanitizeRecord(updated, in _prototype);
    }

    private void MakeDropDownSelectable()
    {
        // Почему это не встроено в сами кнопки
        foreach (var child in ControlGrid.Children)
        {
            if (child is not OptionButton optionButton)
                continue;

            optionButton.OnItemSelected += Select;
        }
    }

    private void Select(OptionButton.ItemSelectedEventArgs args)
    {
        args.Button.SelectId(args.Id);
        MakeSaveAvailable();
    }

    private void CheckAccess()
    {
        Name.Editable = _hasAccess;
        Age.Editable = _hasAccess;
        Personality.Editable = _hasAccess;
        Gender.Disabled = !_hasAccess;
        Species.Disabled = !_hasAccess;
        Job.Disabled = !_hasAccess;
    }

    private void CheckChanges()
    {
        foreach (var child in ControlGrid.Children)
        {
            if (child is not LineEdit lineEdit)
                continue;

            lineEdit.OnTextChanged += _ => MakeSaveAvailable();
        }

        Personality.OnTextChanged += _ => MakeSaveAvailable();
    }

    private void MakeSaveAvailable()
    {
        SaveButton.Disabled = !_hasAccess;
    }
}
