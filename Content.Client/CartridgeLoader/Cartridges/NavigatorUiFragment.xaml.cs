using Content.Client.Pinpointer.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Timing;
using System.Numerics;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class NavigatorUiFragment : BoxContainer
{
    [Dependency] private readonly IEntityManager _entManager = default!;

    public NavMapControl? NavMap;
    private EntityUid? _owner;

    public NavigatorUiFragment()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void Setup(EntityUid? owner)
    {
        _owner = owner;
        NavMap = new NavMapControl();
        NavMap.Owner = owner;
        NavMap.HorizontalExpand = true;
        NavMap.VerticalExpand = true;

        NavMapContainer.AddChild(NavMap);
    }

    public void UpdateState(EntityUid? mapUid, string stationName)
    {
        StationNameLabel.Text = stationName;

        if (NavMap != null && mapUid != null)
        {
            NavMap.MapUid = mapUid;
        }

        // Track owner position on the map
        UpdateOwnerPosition();
    }

    private void UpdateOwnerPosition()
    {
        if (NavMap == null || _owner == null || !_entManager.EntityExists(_owner.Value))
            return;

        var transformSystem = _entManager.System<SharedTransformSystem>();

        var ownerCoords = transformSystem.GetMapCoordinates(_owner.Value);
        var ownerEntityCoords = new EntityCoordinates(_owner.Value, Vector2.Zero);

        // Clear previous owner tracking
        NavMap.TrackedCoordinates.Clear();

        // Add owner position as a tracked coordinate
        NavMap.TrackedCoordinates[ownerEntityCoords] = (true, Color.Red);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        // Periodically update owner position
        UpdateOwnerPosition();
    }
}
