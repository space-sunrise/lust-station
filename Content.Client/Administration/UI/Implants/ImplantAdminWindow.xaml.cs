using System.Linq;
using System.Numerics;
using Content.Client.Eui;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Client.Console;
using Robust.Client.UserInterface;

namespace Content.Client.Administration.UI.Implants;

[GenerateTypedNameReferences]
public sealed partial class ImplantAdminWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypes = default!;
    [Dependency] private readonly IClientConsoleHost _console = default!;

    public NetEntity TargetEntityId;
    public event Action<string>? OnAddImplant;
    public event Action<NetEntity>? OnRemoveImplant;
    public event Action<string, bool, string>? OnReplaceBodySlot; // slotId, isOrgan, protoId
    public event Action<string, bool>? OnRemoveBodySlot; // slotId, isOrgan

    private ImplantAdminEuiState? _state;
    private readonly List<Button> _partButtons = new();
    private readonly List<Button> _organButtons = new();

    public ImplantAdminWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    MinSize = SetSize = new Vector2(640, 560);
    Title = Loc.GetString("implant-admin-window-title");

        // Set tab titles (can't use Title attribute in XAML on BoxContainer children)
        if (RootTabs != null)
        {
            try
            {
                RootTabs.SetTabTitle(0, Loc.GetString("implant-admin-tab-implants"));
                RootTabs.SetTabTitle(1, Loc.GetString("implant-admin-tab-body"));
            }
            catch
            {
                // Ignore; defensive in case structure changes.
            }
        }

        AddButton.ToolTip = Loc.GetString("implant-admin-add-button");
        RemoveButton.Text = Loc.GetString("implant-admin-remove-button");

        int selectedIndex = -1;
        ImplantList.OnItemSelected += args =>
        {
            selectedIndex = args.ItemIndex;
            RemoveButton.Disabled = false;
        };
        ImplantList.OnItemDeselected += args =>
        {
            if (selectedIndex == args.ItemIndex)
                selectedIndex = -1;
            RemoveButton.Disabled = true;
        };
        RemoveButton.OnPressed += _ =>
        {
            if (selectedIndex >= 0)
            {
                var entry = (ImplantEntry) ImplantList[selectedIndex].Metadata!;
                OnRemoveImplant?.Invoke(entry.NetEntity);
            }
        };
        AddButton.OnPressed += _ => OpenAddPopup();
    SearchBar.OnTextChanged += _ => Populate();

    // Body grid buttons will be populated dynamically when state set
    }

    public void SetState(ImplantAdminEuiState state)
    {
        _state = state;
        TargetEntityId = state.TargetNetEntity;
    // Populate both implant list and body / organ grids immediately on state update.
    Populate();
    }

    private void Populate()
    {
        ImplantList.Clear();
        if (_state == null)
            return;

        foreach (var implant in _state.Implants.OrderBy(i => i.Name))
        {
            var label = implant.Name;
            if (implant.Permanent)
                label += " *";
            var item = new ItemList.Item(ImplantList)
            {
                Text = label,
                Metadata = implant
            };
            ImplantList.Add(item);
        }

    // Also refresh body / organ slots so they show up without opening any popups.
    PopulateBody();
    }

    private void OpenAddPopup()
    {
        var popup = new DefaultWindow
        {
            Title = Loc.GetString("implant-admin-add-button"),
            MinSize = new Vector2(320, 400)
        };
        var vbox = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Vertical, HorizontalExpand = true, VerticalExpand = true };
        var search = new LineEdit { PlaceHolder = Loc.GetString("implant-admin-search-placeholder") };
        var list = new ItemList { VerticalExpand = true };
        var confirm = new Button { Text = Loc.GetString("implant-admin-add-button"), Disabled = true };

        vbox.AddChild(search);
        vbox.AddChild(list);
        vbox.AddChild(confirm);
        popup.Contents.AddChild(vbox);
        popup.OpenCentered();

        void Refresh(string filter)
        {
            list.Clear();
            foreach (var proto in _prototypes.EnumeratePrototypes<EntityPrototype>())
            {
                if (!proto.Components.ContainsKey("SubdermalImplant"))
                    continue;
                if (!string.IsNullOrEmpty(filter) && !proto.ID.ToLowerInvariant().Contains(filter.ToLowerInvariant()))
                    continue;
                list.Add(new ItemList.Item(list)
                {
                    Text = proto.ID,
                    Metadata = proto.ID
                });
            }
        }

        Refresh(string.Empty);

        search.OnTextChanged += args => Refresh(search.Text);
        list.OnItemSelected += args => confirm.Disabled = false;
        list.OnItemDeselected += args => confirm.Disabled = true;
        int addSelectedIndex = -1;
        list.OnItemSelected += e =>
        {
            addSelectedIndex = e.ItemIndex;
            confirm.Disabled = false;
        };
        list.OnItemDeselected += e =>
        {
            if (addSelectedIndex == e.ItemIndex)
            {
                addSelectedIndex = -1;
                confirm.Disabled = true;
            }
        };
        confirm.OnPressed += _ =>
        {
            if (addSelectedIndex >= 0)
            {
                var protoId = (string) list[addSelectedIndex].Metadata!;
                OnAddImplant?.Invoke(protoId);
                popup.Close();
            }
        };
    }

    private void PopulateBody()
    {
        if (_state == null)
            return;
        PartGrid.RemoveAllChildren();
        OrganGrid.RemoveAllChildren();
        _partButtons.Clear();
        _organButtons.Clear();

        foreach (var slot in _state.PartSlots.OrderBy(s => s.SlotId))
        {
            var btn = MakeBodySlotButton(slot);
            if (btn == null)
                continue; // hidden via localization
            PartGrid.AddChild(btn);
            _partButtons.Add(btn);
        }
        foreach (var slot in _state.OrganSlots.OrderBy(s => s.SlotId))
        {
            var btn = MakeBodySlotButton(slot);
            if (btn == null)
                continue; // hidden via localization
            OrganGrid.AddChild(btn);
            _organButtons.Add(btn);
        }
    }

    private Button? MakeBodySlotButton(BodySlotEntry slot)
    {
        // Localize slot ID if a key exists: implant-admin-slot-<slotId>
        var slotKey = $"implant-admin-slot-{slot.SlotId}";
        string displayId;
        if (Loc.TryGetString(slotKey, out var locSlot))
        {
            // If localization returns '-' explicitly, hide this slot; if it's empty, fall back to raw ID for visibility.
            if (locSlot != null && locSlot.Trim() == "-")
                return null;
            displayId = string.IsNullOrWhiteSpace(locSlot) ? slot.SlotId : locSlot;
        }
        else
        {
            displayId = slot.SlotId; // fallback raw id
        }

        var text = displayId;
        if (slot.Occupied)
            text += $"\n[{slot.Name}]";
        var btn = new Button
        {
            Text = text,
            ToolTip = slot.Occupied ? $"{displayId}: {slot.Name}\n({(slot.IsOrgan ? Loc.GetString("implant-admin-tooltip-organ") : Loc.GetString("implant-admin-tooltip-part"))})" : $"{displayId} (empty)",
            HorizontalExpand = true,
            VerticalExpand = false,
            MinSize = new Vector2(120, 64)
        };
        btn.OnPressed += _ => OnBodySlotPressed(slot);
        return btn;
    }

    private void OnBodySlotPressed(BodySlotEntry slot)
    {
        // Open a popup with options: Replace..., Remove (if occupied), Cancel
        var popup = new DefaultWindow
        {
            Title = Loc.GetString("implant-admin-body-slot-title", ("slot", slot.SlotId)),
            MinSize = new Vector2(380, 520)
        };
        var vbox = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Vertical, HorizontalExpand = true, VerticalExpand = true };
        var search = new LineEdit { PlaceHolder = Loc.GetString("implant-admin-search-placeholder") };
        var list = new ItemList { VerticalExpand = true };
        var hbox = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Horizontal, HorizontalExpand = true };
        var replaceBtn = new Button { Text = Loc.GetString("implant-admin-replace-button"), Disabled = true };
        var removeBtn = new Button { Text = Loc.GetString("implant-admin-remove-button"), Disabled = !slot.Occupied };
        var cancelBtn = new Button { Text = Loc.GetString("ui-close" )};
        hbox.AddChild(replaceBtn);
        hbox.AddChild(removeBtn);
        hbox.AddChild(cancelBtn);
        vbox.AddChild(search);
        vbox.AddChild(list);
        vbox.AddChild(hbox);
        popup.Contents.AddChild(vbox);
        popup.OpenCentered();

        var lowerSlot = slot.SlotId.ToLowerInvariant();
        void Refresh(string filter)
        {
            list.Clear();
            foreach (var proto in _prototypes.EnumeratePrototypes<EntityPrototype>())
            {
                // filter candidate prototypes by whether they are part / organ
                var isPart = proto.Components.ContainsKey("BodyPart");
                var isOrgan = proto.Components.ContainsKey("Organ");
                if (slot.IsOrgan && !isOrgan)
                    continue;
                if (!slot.IsOrgan && !isPart)
                    continue;
                // quick heuristic: side-specific if matches words
                if (!string.IsNullOrEmpty(filter) && !proto.ID.ToLowerInvariant().Contains(filter.ToLowerInvariant()))
                    continue;
                // Optionally restrict left/right limb: ensure proto ID contains left/right if slot has that word.
                if ((lowerSlot.Contains("left") && !proto.ID.ToLowerInvariant().Contains("left")) && !slot.IsOrgan)
                    continue;
                if ((lowerSlot.Contains("right") && !proto.ID.ToLowerInvariant().Contains("right")) && !slot.IsOrgan)
                    continue;
                list.Add(new ItemList.Item(list)
                {
                    Text = proto.ID,
                    Metadata = proto.ID
                });
            }
        }
        Refresh(string.Empty);
        search.OnTextChanged += _ => Refresh(search.Text);
        int sel = -1;
        list.OnItemSelected += e => { sel = e.ItemIndex; replaceBtn.Disabled = false; };
        list.OnItemDeselected += e => { if (sel == e.ItemIndex){ sel = -1; replaceBtn.Disabled = true; } };

        replaceBtn.OnPressed += _ =>
        {
            if (sel < 0) return;
            var protoId = (string) list[sel].Metadata!;
            ConfirmAction(Loc.GetString("implant-admin-confirm-replace", ("slot", slot.SlotId), ("proto", protoId)), () =>
            {
                OnReplaceBodySlot?.Invoke(slot.SlotId, slot.IsOrgan, protoId);
                popup.Close();
            });
        };
        removeBtn.OnPressed += _ =>
        {
            if (!slot.Occupied) return;
            ConfirmAction(Loc.GetString("implant-admin-confirm-remove", ("slot", slot.SlotId)), () =>
            {
                OnRemoveBodySlot?.Invoke(slot.SlotId, slot.IsOrgan);
                popup.Close();
            });
        };
        cancelBtn.OnPressed += _ => popup.Close();
    }

    private void ConfirmAction(string text, Action confirmed)
    {
        var dialog = new DefaultWindow
        {
            Title = Loc.GetString("implant-admin-confirm-title"),
            MinSize = new Vector2(280, 140)
        };
        var vbox = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Vertical };
        vbox.AddChild(new Label { Text = text, HorizontalExpand = true });
        var h = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Horizontal };
        var ok = new Button { Text = Loc.GetString("ui-yes") };
        var cancel = new Button { Text = Loc.GetString("ui-no") };
        h.AddChild(ok);
        h.AddChild(cancel);
        vbox.AddChild(h);
        dialog.Contents.AddChild(vbox);
        dialog.OpenCentered();
        ok.OnPressed += _ => { confirmed(); dialog.Close(); };
        cancel.OnPressed += _ => dialog.Close();
    }
}
